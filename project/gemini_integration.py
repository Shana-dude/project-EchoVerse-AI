"""
EchoVerse Google Gemini Integration
Handles text generation from topics using Google Gemini API
"""

import streamlit as st
import requests
import json
import time
from config import GOOGLE_GEMINI_API_KEY, GOOGLE_GEMINI_API_BASE

class GeminiTextGenerator:
    def __init__(self):
        self.api_key = GOOGLE_GEMINI_API_KEY
        self.api_base = GOOGLE_GEMINI_API_BASE
        
    def generate_text_from_topic(self, topic, content_type="article", word_count=500):
        """Generate text content from a given topic using Google Gemini"""
        if not self.api_key:
            st.error("‚ùå Google Gemini API key not found. Please check your .env file.")
            return None

        if not topic.strip():
            st.error("‚ùå Please enter a topic to generate content.")
            return None

        try:
            # Create simple prompt
            prompt = f"Write a detailed and engaging {content_type} about '{topic}'. Make it approximately {word_count} words long. The content should be well-structured, informative, and suitable for audio narration."

            st.info("ü§ñ Generating content with Google Gemini...")

            # Debug: Show API key status
            if not self.api_key or len(self.api_key) < 10:
                st.error("‚ùå Invalid API key. Please check your .env file.")
                return None

            # Make API call - Updated to correct model name
            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.api_key}"

            payload = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.7,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 2048,
                }
            }

            headers = {"Content-Type": "application/json"}

            response = requests.post(url, json=payload, headers=headers, timeout=30)

            if response.status_code == 200:
                result = response.json()

                if "candidates" in result and len(result["candidates"]) > 0:
                    candidate = result["candidates"][0]
                    if "content" in candidate and "parts" in candidate["content"]:
                        parts = candidate["content"]["parts"]
                        if len(parts) > 0 and "text" in parts[0]:
                            generated_text = parts[0]["text"].strip()
                            st.success("‚úÖ Content generated successfully!")
                            return generated_text
                    else:
                        st.error("‚ùå Unexpected response structure from Gemini API")
                        return None
                else:
                    st.error("‚ùå No content generated by Gemini API")
                    return None
            else:
                st.error(f"‚ùå Gemini API error: {response.status_code}")
                if response.status_code == 400:
                    st.error("Check your API key and request format")
                elif response.status_code == 403:
                    st.error("API key may not have permission or quota exceeded")
                elif response.status_code == 404:
                    st.error("Model not found - using updated model name")
                return None

        except Exception as e:
            st.error(f"‚ùå Error generating content: {str(e)}")
            return None
    

    
    def test_api_connection(self):
        """Test if the Gemini API is working"""
        if not self.api_key:
            return False, "API key not found"

        try:
            test_result = self.generate_text_from_topic("test", "article", 50)
            if test_result:
                return True, "API connection successful"
            return False, "API test failed"
        except Exception as e:
            return False, f"API test error: {str(e)}"
